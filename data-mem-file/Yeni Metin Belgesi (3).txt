
module RegisterFile (
    input wire clk,
    input wire rst,
    input wire [4:0] readAddr1,
    input wire [4:0] readAddr2,
    input wire [4:0] writeAddr,
    input wire [31:0] writeData,
    input wire writeEnable,
    output wire [31:0] readData1,
    output wire [31:0] readData2
);

  reg [31:0] registers [0:31]; // 4 adet 8-bit register
  integer i = 0 ;
  always @(posedge clk or posedge rst) begin
    if (rst) begin
      // Sıfırlama durumunda tüm register'ları sıfırla
      for (i = 0; i < 32; i = i + 1) begin
        registers[i] <= 8'b0;
      end
    end else if (writeEnable) begin
      // writeEnable aktif olduğunda yazma işlemi gerçekleştir
      registers[writeAddr] <= writeData;
    end
  end

  // Okuma işlemleri
  assign readData1 = registers[readAddr1];
  assign readData2 = registers[readAddr2];

endmodule







module RegisterFile_tb;

  reg clk;
  reg rst;
  reg [4:0] readAddr1, readAddr2, writeAddr;
  reg [31:0] writeData;
  reg writeEnable;
  wire [31:0] readData1, readData2;

  // RegisterFile modülünü çağırma
  RegisterFile uut (
    .clk(clk),
    .rst(rst),
    .readAddr1(readAddr1),
    .readAddr2(readAddr2),
    .writeAddr(writeAddr),
    .writeData(writeData),
    .writeEnable(writeEnable),
    .readData1(readData1),
    .readData2(readData2)
  );

  // Saat sinyali üretimi
  always begin
    #5 clk = ~clk;
  end

  // Test işlemleri
  initial begin
    clk = 0;
    rst = 1;
    writeEnable = 0;
    readAddr1 = 2'b00;
    readAddr2 = 2'b01;
    writeAddr = 2'b10;
    writeData = 8'b11001100;

    // Sıfırlama işlemi
    #10 rst = 0;

    // Write işlemi
    #10 writeEnable = 1;
    #10;

    // Read işlemi
    #10 readAddr1 = 2'b10;
    #10 readAddr2 = 2'b10;
    #10;

    // Simülasyonu sonlandırma
    #10 $finish;
  end

endmodule