module CONTROL(
    input [6:0] funct7,
    input [2:0] funct3,
    input [6:0] opcode,			// giriş ve çıkışların tanımlanması
    output reg [3:0] alu_control,	//alu kontrol degeri
    output reg regwrite_control,	//register file konrol degerı 
    output reg memwrite			//data memory kontrol degerı
);
    always @(funct3 or funct7 or opcode)
    begin
        if (opcode == 7'b0100011) begin // S- Type (sw)	//gelen opcode göre type'nin belırlenmesı
            memwrite = 1;
            
         
        end else if (opcode == 7'b0110011) begin // R-type instructions //gelen opcode göre type'nin belırlenmesı

            regwrite_control = 1;

            case (funct3)			//fonksiyon 3 ve 7'nin durumuna göre alu kontrolun operasyonunun belırlenmesı
                0: begin			// fonksiyon 3 ve 7 degerleri kaynak kıtaptan alınmıstır
                    if(funct7 == 0)
                    alu_control = 4'b0010; // ADD
                    else if(funct7 == 32)
                    alu_control = 4'b0100; // SUB
                end
                6: alu_control = 4'b0001; // OR
                7: alu_control = 4'b0000; // AND
                1: alu_control = 4'b0011; // SLL
                5: alu_control = 4'b0101; // SRL
				2: alu_control = 4'b0110; // MUL
				4: alu_control = 4'b0111; // XOR
            endcase

      
       end else if (opcode == 7'b0010011) begin // I-type instructions//gelen opcode göre type'nin belırlenmesı
            case (funct3)
                0:alu_control = 4'b0010; // ADD
                6: alu_control = 4'b0001; // OR
                7: alu_control = 4'b0000; // AND
                1: alu_control = 4'b0011; // SLL
                5: alu_control = 4'b0101; // SRL
				2: alu_control = 4'b0110; // MUL
				4: alu_control = 4'b0111; // XOR
             endcase
       end
    end


endmodule



testbenh


module testbench;

  // Parametreleri ve sinyalleri tanımla
  reg [6:0] funct7;
  reg [2:0] funct3;
  reg [6:0] opcode;
  wire [3:0] alu_control;
  wire regwrite_control;

  // Modülü çağır
  CONTROL uut (
    .funct7(funct7),
    .funct3(funct3),
    .opcode(opcode),
    .alu_control(alu_control),
    .regwrite_control(regwrite_control),
    .memwrite(memwrite)
  );

  // Giriş sinyallerini belirle
  initial begin
    // Örnek giriş değerleri    R type
    funct7 = 7'h00;
    funct3 = 3'h0;
    opcode = 7'b0110011;
    #10;  // Zamanı ilerlet  
    
    // Giriş değerlerini değiştir ve sonuçları gözlemle
    funct7 = 7'h20;       //  R type
    funct3 = 3'h0;
    opcode = 7'b0110011;
    #10;  // Zamanı ilerlet
    
     // Örnek giriş değerleri   S type
    funct7 = 7'h00;
    funct3 = 3'h0;
    opcode = 7'b0100011;
    #10;  // Zamanı ilerlet 
    // I type
   
    funct3 = 3'b100;
    opcode = 7'b0010011;
    #10;  // Zamanı ilerlet 
    

    // Simülasyonu sonlandır
    #100 $finish;
  end

endmodule


testbench calıstırılırken giris degerleri olarak func7 =0 , func3 = 0 ve opcode 0110011=33
alınmıstır. kod bu baslangıc degerlerını alınca , sistem R type oluyor ve alu control satırında 
alu_control = 4'b0010; // ADD satırı calısmıs oluyor. 0010 oldugu ıcın sonuc 2 olucaktır.ayrıca sistem r type oldugu için
regwrite_control 1 olacaktır. bu ıslemler ılk 10ns için gecerlidir. 
sonrakı asamada func7= 32 , func3=0 opcode=0110011(33) oldugunda sistem yine R tpye olacaktır.
alu_control = 4'b0100; // SUB satırı calısarak alu_control'u 4 eşitler.  funct7 = 7'h00 ,funct3 = 3'h0;
opcode = 7'b0100011(23); oldugunda s type olacaktır sistem . ve memwrite =1 olmaya başlayacatır. bu işlemler boyle devam ede ede 
sekıldekı grafık olsturulmustuur.



